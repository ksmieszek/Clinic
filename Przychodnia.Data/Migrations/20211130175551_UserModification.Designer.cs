// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przychodnia.Data;

namespace Przychodnia.Data.Migrations
{
    [DbContext(typeof(PrzychodniaDbContext))]
    [Migration("20211130175551_UserModification")]
    partial class UserModification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Przychodnia.Data.Entities.Adres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumerDomu")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("NumerMieszkania")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Adresy");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Aktualnosc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("datetime2");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTytul")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odbiorca")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Priorytet")
                        .HasColumnType("bigint");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aktualnosci");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.CennikLekarz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<int?>("LekarzId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.ToTable("CennikiLekarze");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.CennikPoradnia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoradniaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoradniaId");

                    b.ToTable("CennikiPoradnie");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.CennikZabieg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZabiegId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZabiegId");

                    b.ToTable("CennikiZabiegi");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Harmonogram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatoGodzina")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LekarzId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.ToTable("Harmonogramy");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Kontakt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdresId")
                        .HasColumnType("int");

                    b.Property<bool>("Aktywny")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("UzytkownikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Kontakty");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Plec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plcie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aktywna = true,
                            Nazwa = "Kobieta",
                            Opis = "Kobieta"
                        },
                        new
                        {
                            Id = 2,
                            Aktywna = true,
                            Nazwa = "Mężczyzna",
                            Opis = "Mężczyzna"
                        });
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Poradnia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktywna")
                        .HasColumnType("bit");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Poradnie");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Rola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aktywna = true,
                            Nazwa = "Lekarz"
                        },
                        new
                        {
                            Id = 2,
                            Aktywna = true,
                            Nazwa = "Pacjent"
                        });
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Specjalizacja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktywna")
                        .HasColumnType("bit");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Specjalizacje");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.StronaOnas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StronaOnas");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Uzytkownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdresId")
                        .HasColumnType("int");

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Haslo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasloSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("PlecId")
                        .HasColumnType("int");

                    b.Property<int?>("PoradnieId")
                        .HasColumnType("int");

                    b.Property<int>("RolaId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecjalizacjeId")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TokenAktywacyjny")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresId");

                    b.HasIndex("PlecId");

                    b.HasIndex("PoradnieId");

                    b.HasIndex("RolaId");

                    b.HasIndex("SpecjalizacjeId");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Zabieg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktywny")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("CzasTrwania")
                        .HasColumnType("time");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Przeciwwskazania")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Przygotowania")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zabiegi");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.CennikLekarz", b =>
                {
                    b.HasOne("Przychodnia.Data.Entities.Uzytkownik", "Lekarz")
                        .WithMany()
                        .HasForeignKey("LekarzId");

                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.CennikPoradnia", b =>
                {
                    b.HasOne("Przychodnia.Data.Entities.Poradnia", "Poradnia")
                        .WithMany()
                        .HasForeignKey("PoradniaId");

                    b.Navigation("Poradnia");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.CennikZabieg", b =>
                {
                    b.HasOne("Przychodnia.Data.Entities.Zabieg", "Zabieg")
                        .WithMany()
                        .HasForeignKey("ZabiegId");

                    b.Navigation("Zabieg");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Harmonogram", b =>
                {
                    b.HasOne("Przychodnia.Data.Entities.Uzytkownik", "Lekarz")
                        .WithMany()
                        .HasForeignKey("LekarzId");

                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Kontakt", b =>
                {
                    b.HasOne("Przychodnia.Data.Entities.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresId");

                    b.HasOne("Przychodnia.Data.Entities.Uzytkownik", "Uzytkownik")
                        .WithMany()
                        .HasForeignKey("UzytkownikId");

                    b.Navigation("Adres");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Uzytkownik", b =>
                {
                    b.HasOne("Przychodnia.Data.Entities.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresId");

                    b.HasOne("Przychodnia.Data.Entities.Plec", "Plec")
                        .WithMany("Uzytkownicy")
                        .HasForeignKey("PlecId");

                    b.HasOne("Przychodnia.Data.Entities.Poradnia", "Poradnie")
                        .WithMany("Lekarze")
                        .HasForeignKey("PoradnieId");

                    b.HasOne("Przychodnia.Data.Entities.Rola", "Rola")
                        .WithMany("Loginy")
                        .HasForeignKey("RolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Data.Entities.Specjalizacja", "Specjalizacje")
                        .WithMany("Lekarze")
                        .HasForeignKey("SpecjalizacjeId");

                    b.Navigation("Adres");

                    b.Navigation("Plec");

                    b.Navigation("Poradnie");

                    b.Navigation("Rola");

                    b.Navigation("Specjalizacje");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Plec", b =>
                {
                    b.Navigation("Uzytkownicy");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Poradnia", b =>
                {
                    b.Navigation("Lekarze");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Rola", b =>
                {
                    b.Navigation("Loginy");
                });

            modelBuilder.Entity("Przychodnia.Data.Entities.Specjalizacja", b =>
                {
                    b.Navigation("Lekarze");
                });
#pragma warning restore 612, 618
        }
    }
}
